[gd_scene load_steps=9 format=3 uid="uid://bofsgphrertu3"]

[ext_resource type="Script" path="res://scripts/object components/interactable_area.gd" id="1_h7iu1"]
[ext_resource type="Texture2D" uid="uid://dydrn18skchfq" path="res://icon.svg" id="3_f8bhc"]

[sub_resource type="Shader" id="Shader_yp7tk"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform bool enabled = false;
uniform bool pulsing = true;
uniform float thickness : hint_range(0.0, 100.0) = 10;
uniform float thickness_min : hint_range(0.0, 100.0) = 4;
uniform float speed : hint_range(0.0, 10.0) = 3;
uniform int ring_count : hint_range(1,128) = 16;
uniform float ring_offset : hint_range(0.0, 1.0, 0.01);
uniform vec4 outline_color : source_color = vec4(1.0,1.0,1.0,1.0);
uniform bool border_clipping_fix = true;
uniform float aspect_ratio : hint_range(0.1, 10.0, 0.01) = 1.0;
uniform bool square_border = false;
uniform vec2 offset;
uniform bool max_or_add = false;

void vertex(){
	float new_thick = thickness;
	if (pulsing){
		new_thick = thickness_min+(thickness-thickness_min)*(sin(TIME*speed)/2.0+.5);
	} 
	if (!enabled){
		
	}else{
		if (border_clipping_fix){
			vec2 o = (UV * 2.0 - 1.0);
			VERTEX += o * new_thick - offset;
			VERTEX.x *= 1.0 + (aspect_ratio-1.0) * (new_thick * TEXTURE_PIXEL_SIZE.x) * 2.0;
		}
	}
}

vec2 square(float i){ // samples a square pattern
	i *= 2.0;
	return (vec2(
		clamp(abs(mod(i,2.0)-1.0),0.25,0.75),
		clamp(abs(mod(i+0.5,2.0)-1.0),0.25,0.75)
		)-0.5)*4.0;
}

vec4 tex(sampler2D sampler, vec2 uv){
	vec4 clr;
	if (uv.x > 0.0 && uv.y > 0.0 && uv.x < 1.0 && uv.y < 1.0){ // bleeding texture sampling fix
		clr = texture(sampler, uv);
	}else{clr = vec4(0.0);}
	return clr;
}

void fragment(){
	float new_thick = thickness;
	if (pulsing){
		new_thick = thickness_min+(thickness-thickness_min)*(sin(TIME*speed)/2.0+.5);
	} 
	if (!enabled){
		
	}else{
		vec2 o = offset / vec2(textureSize(TEXTURE, 0));
		vec2 uv = UV;
		uv -= vec2(0.5);
		if (border_clipping_fix){
			uv.x *= 1.0 + (aspect_ratio-1.0) * new_thick * TEXTURE_PIXEL_SIZE.x * 2.0;
			uv *= (1.0 + (new_thick * TEXTURE_PIXEL_SIZE * 2.0));
			uv -= o;
			}
		uv += vec2(0.5);
		vec2 size = vec2(new_thick) / vec2(textureSize(TEXTURE, 0));
		
		vec4 sprite_color = tex(TEXTURE, uv);
		
		float alpha = sprite_color.a;
		if (square_border){
			for(int i=0;i<ring_count;++i){
				float r = float(i) / float(ring_count) + ring_offset;
				alpha = max(alpha,texture(TEXTURE, uv + o + size * square(r) * vec2(aspect_ratio,1.0)).a * outline_color.a);}// texture sampling fix is disabled because both with and without give the same result
		}else{
			for(int i=0;i<ring_count;++i){
				float r = float(i) * 3.14159 / float(ring_count) * 2.0 + ring_offset;
				if (max_or_add){
					alpha = alpha+tex(TEXTURE, uv + o +  vec2(size.x * sin(r) * aspect_ratio, size.y * cos(r))).a * outline_color.a;
				}else{
					alpha = max(alpha,tex(TEXTURE, uv + o +  vec2(size.x * sin(r) * aspect_ratio, size.y * cos(r))).a * outline_color.a);
				}
			}
		}
		vec3 final_color = mix(outline_color.rgb, sprite_color.rgb, sprite_color.a);
		COLOR = vec4(final_color, clamp(alpha, 0.0, 1.0));
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_86b0y"]
shader = SubResource("Shader_yp7tk")
shader_parameter/enabled = false
shader_parameter/pulsing = true
shader_parameter/thickness = 10.0
shader_parameter/thickness_min = 4.0
shader_parameter/speed = 3.0
shader_parameter/ring_count = 16
shader_parameter/ring_offset = null
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/border_clipping_fix = true
shader_parameter/aspect_ratio = 1.0
shader_parameter/square_border = false
shader_parameter/offset = null
shader_parameter/max_or_add = false

[sub_resource type="RectangleShape2D" id="RectangleShape2D_qhni7"]

[sub_resource type="Animation" id="Animation_osm25"]
resource_name = "test"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 6.28319]
}

[sub_resource type="Animation" id="Animation_iux6h"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_d4sv7"]
_data = {
"RESET": SubResource("Animation_iux6h"),
"test": SubResource("Animation_osm25")
}

[node name="RoomStarter" type="Node2D"]

[node name="InteractableArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 0
script = ExtResource("1_h7iu1")
highlight_shader = SubResource("ShaderMaterial_86b0y")

[node name="CollisionShape2D" type="CollisionShape2D" parent="InteractableArea"]
shape = SubResource("RectangleShape2D_qhni7")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_86b0y")
texture = ExtResource("3_f8bhc")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_d4sv7")
}

[connection signal="interacted" from="InteractableArea" to="AnimationPlayer" method="play" binds= ["test"]]
