[gd_scene load_steps=23 format=3 uid="uid://bofsgphrertu3"]

[ext_resource type="Script" path="res://scripts/objects/room_starter.gd" id="1_7iyhp"]
[ext_resource type="Script" path="res://scripts/object components/interactable_area.gd" id="1_h7iu1"]
[ext_resource type="Texture2D" uid="uid://c1soj2vhmo36n" path="res://sprites/objects/hourglass.png" id="3_4w46g"]
[ext_resource type="Texture2D" uid="uid://rq5164yec3qg" path="res://sprites/particles/White puff/whitePuff07.png" id="4_hm2ox"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1h7xp"]
size = Vector2(58, 104)

[sub_resource type="Shader" id="Shader_yp7tk"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform bool enabled = false;
uniform bool pulsing = true;
uniform float thickness : hint_range(0.0, 100.0) = 10;
uniform float thickness_min : hint_range(0.0, 100.0) = 4;
uniform float speed : hint_range(0.0, 10.0) = 3;
uniform int ring_count : hint_range(1,128) = 16;
uniform float ring_offset : hint_range(0.0, 1.0, 0.01);
uniform vec4 outline_color : source_color = vec4(1.0,1.0,1.0,1.0);
uniform bool border_clipping_fix = true;
uniform float aspect_ratio : hint_range(0.1, 10.0, 0.01) = 1.0;
uniform bool square_border = false;
uniform vec2 offset;
uniform bool max_or_add = false;

void vertex(){
	float new_thick = thickness;
	if (pulsing){
		new_thick = thickness_min+(thickness-thickness_min)*(sin(TIME*speed)/2.0+.5);
	} 
	if (!enabled){
		
	}else{
		if (border_clipping_fix){
			vec2 o = (UV * 2.0 - 1.0);
			VERTEX += o * new_thick - offset;
			VERTEX.x *= 1.0 + (aspect_ratio-1.0) * (new_thick * TEXTURE_PIXEL_SIZE.x) * 2.0;
		}
	}
}

vec2 square(float i){ // samples a square pattern
	i *= 2.0;
	return (vec2(
		clamp(abs(mod(i,2.0)-1.0),0.25,0.75),
		clamp(abs(mod(i+0.5,2.0)-1.0),0.25,0.75)
		)-0.5)*4.0;
}

vec4 tex(sampler2D sampler, vec2 uv){
	vec4 clr;
	if (uv.x > 0.0 && uv.y > 0.0 && uv.x < 1.0 && uv.y < 1.0){ // bleeding texture sampling fix
		clr = texture(sampler, uv);
	}else{clr = vec4(0.0);}
	return clr;
}

void fragment(){
	float new_thick = thickness;
	if (pulsing){
		new_thick = thickness_min+(thickness-thickness_min)*(sin(TIME*speed)/2.0+.5);
	} 
	if (!enabled){
		
	}else{
		vec2 o = offset / vec2(textureSize(TEXTURE, 0));
		vec2 uv = UV;
		uv -= vec2(0.5);
		if (border_clipping_fix){
			uv.x *= 1.0 + (aspect_ratio-1.0) * new_thick * TEXTURE_PIXEL_SIZE.x * 2.0;
			uv *= (1.0 + (new_thick * TEXTURE_PIXEL_SIZE * 2.0));
			uv -= o;
			}
		uv += vec2(0.5);
		vec2 size = vec2(new_thick) / vec2(textureSize(TEXTURE, 0));
		
		vec4 sprite_color = tex(TEXTURE, uv);
		
		float alpha = sprite_color.a;
		if (square_border){
			for(int i=0;i<ring_count;++i){
				float r = float(i) / float(ring_count) + ring_offset;
				alpha = max(alpha,texture(TEXTURE, uv + o + size * square(r) * vec2(aspect_ratio,1.0)).a * outline_color.a);}// texture sampling fix is disabled because both with and without give the same result
		}else{
			for(int i=0;i<ring_count;++i){
				float r = float(i) * 3.14159 / float(ring_count) * 2.0 + ring_offset;
				if (max_or_add){
					alpha = alpha+tex(TEXTURE, uv + o +  vec2(size.x * sin(r) * aspect_ratio, size.y * cos(r))).a * outline_color.a;
				}else{
					alpha = max(alpha,tex(TEXTURE, uv + o +  vec2(size.x * sin(r) * aspect_ratio, size.y * cos(r))).a * outline_color.a);
				}
			}
		}
		vec3 final_color = mix(outline_color.rgb, sprite_color.rgb, sprite_color.a);
		COLOR = vec4(final_color, clamp(alpha, 0.0, 1.0));
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_86b0y"]
shader = SubResource("Shader_yp7tk")
shader_parameter/enabled = false
shader_parameter/pulsing = true
shader_parameter/thickness = 6.0
shader_parameter/thickness_min = 2.0
shader_parameter/speed = 3.0
shader_parameter/ring_count = 16
shader_parameter/ring_offset = null
shader_parameter/outline_color = Color(1, 1, 1, 1)
shader_parameter/border_clipping_fix = true
shader_parameter/aspect_ratio = 1.0
shader_parameter/square_border = false
shader_parameter/offset = null
shader_parameter/max_or_add = false

[sub_resource type="RectangleShape2D" id="RectangleShape2D_qhni7"]
size = Vector2(58, 110)

[sub_resource type="AtlasTexture" id="AtlasTexture_uip74"]
atlas = ExtResource("3_4w46g")
region = Rect2(96, 0, 96, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_pvytt"]
atlas = ExtResource("3_4w46g")
region = Rect2(192, 0, 96, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_ert2d"]
atlas = ExtResource("3_4w46g")
region = Rect2(288, 0, 96, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_gywqd"]
atlas = ExtResource("3_4w46g")
region = Rect2(384, 0, 96, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_kkyuq"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_uip74")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pvytt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ert2d")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gywqd")
}],
"loop": false,
"name": &"flip",
"speed": 5.0
}]

[sub_resource type="Animation" id="Animation_iux6h"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("GPUParticles2D:emitting")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="Animation" id="Animation_osm25"]
resource_name = "test"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 6.28319]
}

[sub_resource type="Animation" id="Animation_1lp6h"]
resource_name = "flip"
length = 1.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.4),
"transitions": PackedFloat32Array(4, 1),
"update": 0,
"values": [0.0, 3.14159]
}
tracks/1/type = "method"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(1.5),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"queue_free"
}]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(1, 1.3),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(1, 1, 1, 1), Color(1, 1, 1, 0)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("GPUParticles2D:emitting")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0.4),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_d4sv7"]
_data = {
"RESET": SubResource("Animation_iux6h"),
"flip": SubResource("Animation_1lp6h"),
"test": SubResource("Animation_osm25")
}

[sub_resource type="Gradient" id="Gradient_6g5xa"]
offsets = PackedFloat32Array(0, 0.525926, 1)
colors = PackedColorArray(0.45098, 0.105882, 0.505882, 1, 0.760784, 0.313726, 0.835294, 0.942977, 0.760784, 0.313726, 0.835294, 0.407843)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_30po2"]
gradient = SubResource("Gradient_6g5xa")

[sub_resource type="Curve" id="Curve_7kcge"]
_data = [Vector2(0, 0.244595), 0.0, 0.0, 0, 0, Vector2(0.758389, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_qfx2h"]
curve = SubResource("Curve_7kcge")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_7etdb"]
particle_flag_disable_z = true
emission_shape = 1
emission_sphere_radius = 40.0
direction = Vector3(0, -1, 0)
initial_velocity_max = 30.0
gravity = Vector3(0, -30, 0)
scale_min = 0.1
scale_max = 0.3
scale_curve = SubResource("CurveTexture_qfx2h")
color_ramp = SubResource("GradientTexture1D_30po2")

[node name="HourGlass" type="StaticBody2D"]
script = ExtResource("1_7iyhp")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_1h7xp")

[node name="InteractableArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 0
script = ExtResource("1_h7iu1")
highlight_shader = SubResource("ShaderMaterial_86b0y")

[node name="CollisionShape2D" type="CollisionShape2D" parent="InteractableArea"]
shape = SubResource("RectangleShape2D_qhni7")

[node name="Sprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_86b0y")
sprite_frames = SubResource("SpriteFrames_kkyuq")
animation = &"flip"
frame = 3
frame_progress = 1.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_d4sv7")
}

[node name="GPUParticles2D" type="GPUParticles2D" parent="."]
position = Vector2(0, 31)
emitting = false
amount = 20
process_material = SubResource("ParticleProcessMaterial_7etdb")
texture = ExtResource("4_hm2ox")
one_shot = true
explosiveness = 1.0
randomness = 0.2

[connection signal="interacted" from="InteractableArea" to="." method="start_room"]
[connection signal="interacted" from="InteractableArea" to="Sprite2D" method="play" binds= ["flip"]]
[connection signal="interacted" from="InteractableArea" to="AnimationPlayer" method="play" binds= ["flip"]]
